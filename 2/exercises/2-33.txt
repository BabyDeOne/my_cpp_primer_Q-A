Using the variable definitions from this section, determine what happens in each of these assignments:

Definitions(from book p71):
    int i = 0, &r = i;
    auto a = r; // a is an int (r is an alias for i, which has type int)
    const int ci = i, &cr = ci;
    auto b = ci; // b is an int (top-level const in ci is dropped)
    auto c = cr; // c is an int (cr is an alias for ci whose const is top-level)
    auto d = &i; // d is an int* (& of an int object is int*)
    auto e = &ci; // e is const int* (& of a const object is low-level const)
    auto &g = ci; // g is a const int& that is bound to ci

Answers:
a = 42;
    42 is assigned to a.
b = 42;
    42 is assigned to the value of b.
c = 42;
    the value of c become 42 from 0.
d = 42;
    error: d is a pointer to int. it must be dereferenced first.
e = 42;
    error: e is a pointer to a constant int. It can't point to an int.
g = 42;
    error: g is a const int &. It can't be reassigned after initialization.
